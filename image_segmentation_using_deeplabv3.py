# -*- coding: utf-8 -*-
"""Image_Segmentation_Using_DeepLabV3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ygFHvkY9v7uNAyKLOcCKhlNkh0fz_Do4
"""

# -*- coding: utf-8 -*-
import torch
from PIL import Image
from torchvision import transforms
import matplotlib.pyplot as plt

# Load the pre-trained DeepLabV3 model
def load_model():
    model = torch.hub.load('pytorch/vision:v0.10.0', 'deeplabv3_resnet50', pretrained=True)
    model.eval()
    return model

# Preprocess the image
def preprocess_image(image_path):
    input_image = Image.open(image_path)
    input_image = input_image.convert("RGB")

    preprocess = transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
    ])

    input_tensor = preprocess(input_image)
    input_batch = input_tensor.unsqueeze(0)  # Create a mini-batch as expected by the model
    return input_batch, input_image

# Model inference
def model_inference(model, input_batch):
    with torch.no_grad():
        output = model(input_batch)['out'][0]
    return output.argmax(0)

# Visualization of the results
def visualize_results(input_image, predictions):
    # Create a color palette, each class will be a different color
    palette = torch.tensor([2 ** 25 - 1, 2 ** 15 - 1, 2 ** 21 - 1])
    colors = torch.as_tensor([i for i in range(21)])[:, None] * palette
    colors = (colors % 255).numpy().astype("uint8")

    # Apply the color palette to the predicted segmentation map
    r = Image.fromarray(predictions.byte().cpu().numpy()).resize(input_image.size)
    r.putpalette(colors)

    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.title('Original Image')
    plt.imshow(input_image)
    plt.axis('off')

    plt.subplot(1, 2, 2)
    plt.title('Segmentation Prediction')
    plt.imshow(r)
    plt.axis('off')

    plt.show()

# Main function to execute the workflow
def main():
    model = load_model()
    image_path = '/content/333.PNG'
    input_batch, input_image = preprocess_image(image_path)
    predictions = model_inference(model, input_batch)
    visualize_results(input_image, predictions)

if __name__ == "__main__":
    main()